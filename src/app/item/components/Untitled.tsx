/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/untitled.glb --types 
*/

import { useGLTF, useTexture } from '@react-three/drei'
import React from 'react'
import * as THREE from 'three'
import { GLTF } from 'three-stdlib'
import { useCustomization } from '../_store/customizationStore'
import { TextureProps } from './Chair'

type GLTFResult = GLTF & {
  nodes: {
    leg: THREE.Mesh
    leg2: THREE.Mesh
    leg3: THREE.Mesh
    leg4: THREE.Mesh
    Plane001_Material_0: THREE.Mesh
  }
  materials: {
    ['Material.001']: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>
>

export const Model = () => {
  const { nodes, materials } = useGLTF('./models/untitled.glb') as GLTFResult

  const [material, legs, mainColor, detailColor] = useCustomization((state) => [
    state.material,
    state.legs,
    state.mainColor,
    state.detailColor,
  ])

  const leatherTextureProps: TextureProps = useTexture({
    normalMap: './textures/armchair/Material_normal.png',
    roughnessMap: './textures/armchair/Material_metallicRoughness.png',
    aoMap: './textures/leather/Leather_008_Ambient Occlusion.jpg',
  })

  leatherTextureProps.normalMap.repeat.set(1, 1)
  leatherTextureProps.roughnessMap.repeat.set(1, 1)
  leatherTextureProps.aoMap.repeat.set(1, 1)

  return (
    <group
      dispose={null}
      position={[0, 1.25, 0]}
      scale={3}
      rotation={[0, -(Math.PI / 3), 0]}
    >
      <group position={[-0.124, 0.297, -1.75]} rotation={[-Math.PI / 2, 0, 0]}>
        <group
          position={[-0.139, 0.355, 0.439]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        >
          <group position={[14.455, -6.735, 119.536]}>
            <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
              <mesh
                receiveShadow
                castShadow
                geometry={nodes.leg.geometry}
                material={materials['Material.001']}
                position={[0.029, -0.914, -1.085]}
              >
                <meshStandardMaterial color={detailColor.color} />
              </mesh>
              <mesh
                receiveShadow
                castShadow
                geometry={nodes.leg2.geometry}
                material={materials['Material.001']}
                position={[0.029, -0.914, -1.085]}
              >
                <meshStandardMaterial color={detailColor.color} />
              </mesh>
              <mesh
                receiveShadow
                castShadow
                geometry={nodes.leg3.geometry}
                material={materials['Material.001']}
                position={[0.029, -0.914, -1.085]}
              >
                <meshStandardMaterial color={detailColor.color} />
              </mesh>
              <mesh
                receiveShadow
                castShadow
                geometry={nodes.leg4.geometry}
                material={materials['Material.001']}
                position={[0.029, -0.914, -1.085]}
              >
                <meshStandardMaterial color={detailColor.color} />
              </mesh>
              <mesh
                receiveShadow
                castShadow
                geometry={nodes.Plane001_Material_0.geometry}
                position={[0.029, -0.914, -1.085]}
              >
                <meshStandardMaterial color={mainColor.color} />
              </mesh>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('./models/untitled.glb')
